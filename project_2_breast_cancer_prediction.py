# -*- coding: utf-8 -*-
"""Project 2: Breast Cancer Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Q1v0zyxS0AcUNfww8OC4C9aIi5MFPG7
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis,
Loading Breast Cancer Wisconsin (Diagnostic) dataset.
"""

cancer_dataset = pd.read_csv("/content/data.csv")

# printing the first 5 rows of the dataset
cancer_dataset.head()

print(cancer_dataset)

# number of rows and Columns in this dataset
cancer_dataset.shape

# getting the statistical measures of the data
cancer_dataset.describe()

# counting the number of missing values in the dataset
cancer_dataset.isnull().sum()

cancer_dataset["diagnosis"].value_counts()

# load the Label Encoder Function
label_encode = LabelEncoder()

labels = label_encode.fit_transform(cancer_dataset.diagnosis)

# appending the labels to the dataframe
cancer_dataset["diagnosis"]=labels

cancer_dataset.head()

"""0 ----Benign
1-----Malignant
"""

cancer_dataset["diagnosis"].value_counts()

"""Data Standardization

The process of standardizing the data to a common format and common range
"""

X = cancer_dataset.drop(columns = 'diagnosis', axis=1)
Y = cancer_dataset["diagnosis"]

print(X)

print(Y)

"""Splitting the data into training data and test data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size =0.2,random_state = 3)

print(X.shape,X_train.shape,X_test.shape)

"""Standardize the Data"""

scaler = StandardScaler()

scaler.fit(X_train)

X_train_standardized = scaler.transform(X_train)

print(X_train_standardized)

X_test_standardized = scaler.transform(X_test)

print(X_test_standardized)

print(X_train_standardized.std())
print(X_test_standardized.std())

X_train = X_train_standardized
X_test = X_test_standardized

"""Training the Model"""

classifier = svm.SVC(kernel='linear')

#training the support vector Machine Classifier
classifier.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

# accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data : ', test_data_accuracy)

"""Making a Predictive System


"""

input_data = (5,166,72,19,175,25.8,0.587,51,5,166,72,19,175,25.8,0.587,51,5,166,72,19,175,25.8,0.587,51,5,166,72,19,175,25.8,0.587)

# changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

